
const { default: makeWASocket, useSingleFileAuthState, fetchLatestBaileysVersion, makeInMemoryStore } = require("@whiskeysockets/baileys");
const { Boom } = require("@hapi/boom");
const fs = require("fs");

const { state, saveState } = useSingleFileAuthState("./auth_info.json");

async function startSock() {
    const { version, isLatest } = await fetchLatestBaileysVersion();
    const sock = makeWASocket({
        version,
        auth: state,
        printQRInTerminal: false, // No mostrar QR
    });

    sock.ev.on("creds.update", saveState);

    sock.ev.on("connection.update", async (update) => {
        const { connection, lastDisconnect, isNewLogin } = update;
        if (connection === "open") {
            console.log("‚úÖ ¬°Conectado a WhatsApp!");
        } else if (connection === "close") {
            const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
            console.log("‚ùå Conexi√≥n cerrada, reconectando:", shouldReconnect);
            if (shouldReconnect) startSock();
        }
    });

    // Si es un nuevo login, generar c√≥digo de emparejamiento
    if (!state.creds.registered) {
        const phoneNumber = "5492915268762"; // <- tu n√∫mero completo con c√≥digo de pa√≠s, sin espacios
        const code = await sock.requestPairingCode(phoneNumber);
        console.log(`üî¢ Ingresa este c√≥digo en tu tel√©fono: ${code}`);
    }
}

startSock();


// Configurar FFmpeg
ffmpeg.setFfmpegPath(ffmpegPath);

// Funci√≥n para descargar imagen desde URL
async function descargarImagenDesdeUrl(url) {
  return new Promise((resolve, reject) => {
    console.log(`üåê Iniciando descarga de: ${url}`);
    const protocolo = url.startsWith('https:') ? https : http;
    
    const options = {
      headers: {
        'User-Agent': 'WhatsApp Bot/1.0'
      }
    };
    
    const request = protocolo.get(url, options, (response) => {
      console.log(`üìä Respuesta HTTP: ${response.statusCode}`);
      console.log(`üìù Content-Type: ${response.headers['content-type']}`);
      
      // Seguir redirecciones
      if (response.statusCode >= 300 && response.statusCode < 400 && response.headers.location) {
        console.log(`üîÑ Siguiendo redirect a: ${response.headers.location}`);
        return descargarImagenDesdeUrl(response.headers.location).then(resolve).catch(reject);
      }
      
      if (response.statusCode !== 200) {
        reject(new Error(`Error HTTP: ${response.statusCode} - ${response.statusMessage}`));
        return;
      }
      
      const chunks = [];
      let totalBytes = 0;
      
      response.on('data', (chunk) => {
        chunks.push(chunk);
        totalBytes += chunk.length;
      });
      
      response.on('end', () => {
        const buffer = Buffer.concat(chunks);
        console.log(`‚úÖ Descarga completa: ${buffer.length} bytes`);
        resolve(buffer);
      });
      
      response.on('error', (error) => {
        console.error(`‚ùå Error en respuesta: ${error.message}`);
        reject(error);
      });
    });
    
    request.setTimeout(60000, () => {
      console.error(`‚è∞ Timeout en descarga de: ${url}`);
      request.destroy();
      reject(new Error('Timeout en descarga de imagen'));
    });
    
    request.on('error', (error) => {
      console.error(`‚ùå Error en solicitud: ${error.message}`);
      
      // Detectar errores espec√≠ficos de certificados SSL/TLS
      if (error.code === 'UNABLE_TO_GET_ISSUER_CERT_LOCALLY' || 
          error.code === 'SELF_SIGNED_CERT_IN_CHAIN' ||
          error.message.includes('certificate')) {
        console.error(`üîí ERROR DE CERTIFICADOS SSL/TLS DETECTADO`);
        console.error(`üí° SOLUCI√ìN: Instala certificados CA en tu sistema Linux:`);
        console.error(`   sudo apt-get update && sudo apt-get install ca-certificates`);
        console.error(`   sudo update-ca-certificates`);
      }
      
      reject(error);
    });
  });
}

// Base de datos de personajes coleccionables
const personajesAnime = [
  // Dragon Ball Super
  {
    id: 'goku_ui',
    nombre: 'Son Goku Ultra Instinct',
    anime: 'Dragon Ball Super',
    rareza: 'Legendario',
    valor: 75000,
    poder: 999999,
    nivel: 'Dios',
    descripcion: 'üî• La transformaci√≥n m√°s poderosa de Goku. Ha dominado el Ultra Instinto Perfecto, una t√©cnica que ni los dioses pueden dominar f√°cilmente. Su cuerpo se mueve autom√°ticamente sin necesidad de pensamiento.',
    habilidades: ['Ultra Instinto', 'Kamehameha Definitivo', 'Velocidad Divina'],
    imagenUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/150.png',
    probabilidad: 0.02 // 2%
  },
  {
    id: 'goku_ssb',
    nombre: 'Son Goku Super Saiyan Blue',
    anime: 'Dragon Ball Super', 
    rareza: '√âpico',
    valor: 35000,
    poder: 850000,
    nivel: 'Dios',
    descripcion: 'üíô Goku en Super Saiyan Blue (Super Saiyan God Super Saiyan). Combina el poder del Super Saiyan con la energ√≠a divina del Super Saiyan God. Control perfecto del ki divino.',
    habilidades: ['Super Kamehameha Blue', 'Kaioken x20', 'Teletransportaci√≥n'],
    imagenUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/149.png',
    probabilidad: 0.08 // 8%
  },
  {
    id: 'vegeta_ssb',
    nombre: 'Vegeta Super Saiyan Blue',
    anime: 'Dragon Ball Super',
    rareza: '√âpico', 
    valor: 32000,
    poder: 820000,
    nivel: 'Dios',
    descripcion: 'üëë El Pr√≠ncipe de los Saiyans en Super Saiyan Blue. Su orgullo y determinaci√≥n lo han llevado al nivel divino. Maestro del Final Flash con poder celestial.',
    habilidades: ['Final Flash Blue', 'Big Bang Attack', 'Orgullo Saiyan'],
    imagenUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/144.png',
    probabilidad: 0.10 // 10%
  },
  {
    id: 'vegeta_ue',
    nombre: 'Vegeta Ultra Ego',
    anime: 'Dragon Ball Super',
    rareza: 'Legendario',
    valor: 65000,
    poder: 950000,
    nivel: 'Dios Destructor',
    descripcion: 'üíú Vegeta ha alcanzado el Ultra Ego, la contraparte destructiva del Ultra Instinto. Su poder aumenta con cada golpe recibido. Camino hacia Dios de la Destrucci√≥n.',
    habilidades: ['Ultra Ego', 'Hakai', 'Poder Destructivo Infinito'],
    imagenUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/145.png',
    probabilidad: 0.03 // 3%
  },
  // One Punch Man
  {
    id: 'saitama_serio',
    nombre: 'Saitama Modo Serio',
    anime: 'One Punch Man',
    rareza: 'Legendario',
    valor: 100000,
    poder: 999999,
    nivel: 'Imparable',
    descripcion: 'üíÄ Saitama cuando finalmente se toma las cosas en serio. Su poder no tiene l√≠mites conocidos. Un solo golpe serio puede destruir planetas enteros. El h√©roe m√°s fuerte.',
    habilidades: ['Serious Punch', 'Serious Table Flip', 'Velocidad Infinita'],
    imagenUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/146.png',
    probabilidad: 0.01 // 1%
  },
  {
    id: 'saitama_casual',
    nombre: 'Saitama (H√©roe Calvo)',
    anime: 'One Punch Man',
    rareza: 'Raro',
    valor: 18000,
    poder: 500000,
    nivel: 'Clase S',
    descripcion: 'ü•ö El h√©roe m√°s poderoso de todos, pero nadie lo reconoce. Puede derrotar cualquier enemigo con un solo golpe. Su mayor problema es que todo es muy aburrido para √©l.',
    habilidades: ['Normal Punch', 'Consecutive Normal Punches', 'Jump'],
    imagenUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/143.png',
    probabilidad: 0.26 // 26%
  },
  {
    id: 'genos_upgrade',
    nombre: 'Genos Full Power',
    anime: 'One Punch Man',
    rareza: 'Com√∫n',
    valor: 12000,
    poder: 220000,
    nivel: 'Clase S',
    descripcion: 'ü§ñ El Cyborg Demonio despu√©s de sus √∫ltimas mejoras. Disc√≠pulo devoto de Saitama. Sus partes rob√≥ticas son de √∫ltima generaci√≥n y su determinaci√≥n es inquebrantable.',
    habilidades: ['Incineration Cannon', 'Machine Gun Blow', 'Rocket Punch'],
    imagenUrl: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/142.png',
    probabilidad: 0.50 // 50%
  }
];

// Funci√≥n para obtener personaje aleatorio basado en probabilidades
function obtenerPersonajeAleatorio() {
  const random = Math.random();
  let acumulado = 0;
  
  // Ordenar por probabilidad (m√°s raros primero)
  const personajesOrdenados = [...personajesAnime].sort((a, b) => a.probabilidad - b.probabilidad);
  
  for (const personaje of personajesOrdenados) {
    acumulado += personaje.probabilidad;
    if (random <= acumulado) {
      return personaje;
    }
  }
  
  // Fallback al √∫ltimo personaje (m√°s com√∫n)
  return personajesOrdenados[personajesOrdenados.length - 1];
}

// Base de datos
let usuarios = {};
if (fs.existsSync("usuarios.json")) {
  usuarios = JSON.parse(fs.readFileSync("usuarios.json"));
  guardarBD();
}
function guardarBD() {
  fs.writeFileSync("usuarios.json", JSON.stringify(usuarios, null, 2));
}

// Sistema de rangos (simplificado por poder, ajusta valores a gusto)
function obtenerRangoClasificacion(poder) {
  if (poder < 500) return { rango: "Callejero", clasificacion: "C" };
  if (poder < 1500) return { rango: "Callejero", clasificacion: "B" };
  if (poder < 2500) return { rango: "Callejero", clasificacion: "A" };

  if (poder < 4000) return { rango: "H√©roe", clasificacion: "C" };
  if (poder < 6000) return { rango: "H√©roe", clasificacion: "B" };
  if (poder < 8000) return { rango: "H√©roe", clasificacion: "A" };

  if (poder < 11000) return { rango: "Continental", clasificacion: "B" };
  if (poder < 15000) return { rango: "Continental", clasificacion: "A" };
  if (poder < 20000) return { rango: "Continental", clasificacion: "S" };

  if (poder < 30000) return { rango: "Planetario", clasificacion: "D" };
  if (poder < 45000) return { rango: "Planetario", clasificacion: "C" };
  if (poder < 60000) return { rango: "Planetario", clasificacion: "B" };
  if (poder < 80000) return { rango: "Planetario", clasificacion: "A" };
  if (poder < 100000) return { rango: "Planetario", clasificacion: "S" };

  if (poder < 150000) return { rango: "Estelar", clasificacion: "B" };
  if (poder < 200000) return { rango: "Estelar", clasificacion: "A" };
  if (poder < 300000) return { rango: "Estelar", clasificacion: "S" };

  if (poder < 400000) return { rango: "Universal", clasificacion: "A" };
  if (poder < 500000) return { rango: "Universal", clasificacion: "S" };

  if (poder < 700000) return { rango: "Infinity", clasificacion: "A" };
  if (poder < 900000) return { rango: "Infinity", clasificacion: "S" };

  if (poder < 1200000) return { rango: "Celestial", clasificacion: "S" };
  if (poder < 1500000) return { rango: "Eterno", clasificacion: "S" };
  if (poder < 2000000) return { rango: "Sester", clasificacion: "B" };
  if (poder < 2500000) return { rango: "Sester", clasificacion: "A" };
  if (poder < 3000000) return { rango: "Sester", clasificacion: "S" };

  if (poder < 4000000) return { rango: "Eterniti", clasificacion: "S" };
  if (poder < 5000000) return { rango: "Eterniun", clasificacion: "C" };
  if (poder < 6000000) return { rango: "Eterniun", clasificacion: "B" };
  if (poder < 7000000) return { rango: "Eterniun", clasificacion: "A" };
  return { rango: "Eterniun", clasificacion: "S" };
}

// Funci√≥n para formatear n√∫meros grandes
function formatearNumero(num) {
  if (num >= 1000000000000) {
    return (num / 1000000000000).toFixed(1) + 'B';
  } else if (num >= 1000000000) {
    return (num / 1000000000).toFixed(1) + 'MM';
  } else if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  } else if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'k';
  }
  return num.toString();
}

// Funci√≥n para procesar inversiones pendientes
function procesarInversiones(user, userId) {
  if (!user.inversionesPendientes || user.inversionesPendientes.length === 0) {
    return [];
  }

  const ahora = Date.now();
  const inversionesListas = [];
  const inversionesRestantes = [];

  for (const inversion of user.inversionesPendientes) {
    if (ahora >= inversion.vencimiento) {
      inversionesListas.push(inversion);
      user.dinero += inversion.retorno;
    } else {
      inversionesRestantes.push(inversion);
    }
  }

  user.inversionesPendientes = inversionesRestantes;

  if (inversionesListas.length > 0) {
    guardarBD();
  }

  return inversionesListas;
}

// Administradores supremos
const ADMIN_SUPREMO = "5492915268762@s.whatsapp.net";
const ADMIN_SECUNDARIO = "5492915207066@s.whatsapp.net";

// Base de datos de admins supremos
let adminsSupremos = {};
if (fs.existsSync("admins.json")) {
  adminsSupremos = JSON.parse(fs.readFileSync("admins.json"));
}
function guardarAdmins() {
  fs.writeFileSync("admins.json", JSON.stringify(adminsSupremos, null, 2));
}

// Control de reconexi√≥n para evitar m√∫ltiples sockets
let isReconnecting = false;
let currentSocket = null;
let pairingRequested = false;
let salesVerifierInterval = null;

async function startBot() {
  // Limpiar socket anterior si existe
  if (currentSocket) {
    currentSocket.ev.removeAllListeners();
    currentSocket.end();
  }

  // Limpiar interval anterior si existe
  if (salesVerifierInterval) {
    clearInterval(salesVerifierInterval);
    salesVerifierInterval = null;
  }

  // Resetear flag de emparejamiento para nueva sesi√≥n
  pairingRequested = false;

  const { state, saveCreds } = await useMultiFileAuthState("auth");
  const sock = makeWASocket({ 
    auth: state,
    printQRInTerminal: false,
    browser: ['Ubuntu', 'Chrome', '20.0.04'],
    generateHighQualityLinkPreview: true,
    markOnlineOnConnect: false
  });

  currentSocket = sock;

  sock.ev.on("creds.update", saveCreds);

  // Manejo de conexi√≥n y c√≥digo de emparejamiento
  // Solicitar c√≥digo de emparejamiento una sola vez
  if (!sock.authState.creds.registered && !pairingRequested) {
    pairingRequested = true;
    console.log("\nüîó Generando c√≥digo de emparejamiento...");
    console.log("üì± Ve a WhatsApp > Configuraci√≥n > Dispositivos vinculados > Vincular dispositivo");
    console.log("üí° Cuando te pida el c√≥digo, √∫salo para vincular este bot\n");

    try {
      // Esperar un momento para estabilizar conexi√≥n
      await new Promise(resolve => setTimeout(resolve, 2000));
      const pairingCode = await sock.requestPairingCode("5492915268762");
      console.log("üéØ C√ìDIGO DE EMPAREJAMIENTO: " + pairingCode);
      console.log("üí¨ Usa este c√≥digo en WhatsApp para vincular el bot a tu cuenta\n");
      console.log("üìù PASOS:");
      console.log("1. Abre WhatsApp en tu tel√©fono");
      console.log("2. Ve a Configuraci√≥n > Dispositivos vinculados");
      console.log("3. Toca 'Vincular dispositivo'");
      console.log("4. Ingresa el c√≥digo: " + pairingCode);
    } catch (error) {
      console.log("‚ùå Error generando c√≥digo:", error.message);
      pairingRequested = false; // Permitir reintentar
    }
  }

  sock.ev.on("connection.update", async (update) => {
    const { connection, lastDisconnect, qr } = update;

    if (connection === "close") {
      const statusCode = lastDisconnect?.error?.output?.statusCode;
      console.log("‚ùå Conexi√≥n cerrada debido a:", lastDisconnect?.error);

      // Limpiar interval de ventas autom√°ticas al cerrar conexi√≥n
      if (salesVerifierInterval) {
        clearInterval(salesVerifierInterval);
        salesVerifierInterval = null;
      }

      if (statusCode === 401) {
        console.log("üîê Sesi√≥n expirada, limpiando autenticaci√≥n...");
        pairingRequested = false; // Permitir nueva solicitud de c√≥digo
      } else if (!isReconnecting) {
        console.log("üîÑ Reconectando...");
        isReconnecting = true;
        setTimeout(() => {
          isReconnecting = false;
          startBot();
        }, 3000);
      }
    } else if (connection === "open") {
      console.log("‚úÖ ¬°Bot conectado exitosamente a WhatsApp!");
      isReconnecting = false;

      // Iniciar verificador de ventas autom√°ticas solo si no existe
      if (!salesVerifierInterval) {
        salesVerifierInterval = setInterval(() => {
        const ahora = Date.now();
        let ventasRealizadas = false;

        Object.entries(usuarios).forEach(([userId, user]) => {
          if (user.ventasPendientes && user.ventasPendientes.length > 0) {
            const ventasOriginales = user.ventasPendientes.length;
            user.ventasPendientes = user.ventasPendientes.filter(venta => {
              if (ahora >= venta.tiempoVenta) {
                if (venta.item === 'onzaOro' && user.inventario && user.inventario.onzaOro > 0) {
                  user.inventario.onzaOro -= 1;
                  user.dinero += venta.precio;
                  ventasRealizadas = true;

                  // Notificar al usuario de la venta autom√°tica
                  try {
                    if (currentSocket === sock) {
                      sock.sendMessage(userId, {
                        text: `‚óà ¬°Venta autom√°tica ejecutada!\n\n‚óÜ Item vendido: *Onza de Oro*\n‚óà Precio recibido: *$${venta.precio.toLocaleString()}*\n‚óâ El bot compr√≥ tu onza de oro autom√°ticamente\n‚óä Tus coins universal: *$${user.dinero.toLocaleString()}*`
                      });
                    }
                  } catch (error) {
                    console.log("Error enviando notificaci√≥n de venta autom√°tica:", error);
                  }
                }
                return false;
              }
              return true;
            });

            if (user.ventasPendientes.length !== ventasOriginales) {
              ventasRealizadas = true;
            }
          }
        });

        // Solo guardar BD si se realizaron ventas
        if (ventasRealizadas) {
          guardarBD();
        }
      }, 60000);
      }
    }
  });

  sock.ev.on("messages.upsert", async ({ messages }) => {
    const msg = messages[0];
    if (!msg.message) return;

    const chatId = msg.key.remoteJid;
    const senderId = msg.key.participant || chatId;

    // Ignorar mensajes de sistema/estado
    if (chatId.includes("status@broadcast") || chatId.includes("@newsletter")) return;

    const body = msg.message.conversation || 
                 msg.message.extendedTextMessage?.text ||
                 msg.message.imageMessage?.caption ||
                 msg.message.videoMessage?.caption;
    if (!body) return;

    // Solo responder a comandos que empiecen con #
    if (!body.startsWith("#")) return;

    // Registrar usuario (por remitente, no por chat)
    if (!usuarios[senderId]) {
      usuarios[senderId] = {
        nombre: senderId.split("@")[0],
        nivel: 1,
        poder: 100,
        rayo: null,
        ultimaDaily: 0,
        ultimoEntrenamiento: 0,
        coinsUniversal: 0,
        dinero: 1000,
        banco: 0,
        ultimoTrabajo: 0,
        ultimoRobo: 0,
        ultimaApuesta: 0,
        ultimaInversion: 0,
        ultimaMineria: 0,
        negocio: null,
        ultimoNegocio: 0,
        multiplicadorTrabajo: 0,
        inversionesPendientes: [],
        descripcion: null,
        genero: null,
        cumpleanos: null,
        ruletaChallenge: null,
        coleccionables: [],
        ultimoColeccionable: 0,
        personajeDisponible: null,
        mensajePersonajeId: null
      };
      guardarBD();
    }

    let user = usuarios[senderId];

    // Asegurar compatibilidad con usuarios existentes
    if (!user.ultimoEntrenamiento) {
      user.ultimoEntrenamiento = 0;
    }
    if (!user.hasOwnProperty('coinsUniversal')) {
      user.coinsUniversal = 0;
    }
    if (!user.hasOwnProperty('dinero')) {
      user.dinero = 1000;
    }
    if (!user.hasOwnProperty('ultimoTrabajo')) {
      user.ultimoTrabajo = 0;
    }
    if (!user.hasOwnProperty('ultimoRobo')) {
      user.ultimoRobo = 0;
    }
    if (!user.hasOwnProperty('multiplicadorTrabajo')) {
      user.multiplicadorTrabajo = 0;
    }
    if (!user.hasOwnProperty('ultimaApuesta')) {
      user.ultimaApuesta = 0;
    }
    if (!user.hasOwnProperty('ultimaInversion')) {
      user.ultimaInversion = 0;
    }
    if (!user.hasOwnProperty('negocio')) {
      user.negocio = null;
    }
    if (!user.hasOwnProperty('ultimoNegocio')) {
      user.ultimoNegocio = 0;
    }
    if (!user.hasOwnProperty('ultimaMineria')) {
      user.ultimaMineria = 0;
    }
    if (!user.hasOwnProperty('inversionesPendientes')) {
      user.inversionesPendientes = [];
    }
    if (!user.hasOwnProperty('descripcion')) {
      user.descripcion = null;
    }
    if (!user.hasOwnProperty('genero')) {
      user.genero = null;
    }
    if (!user.hasOwnProperty('cumpleanos')) {
      user.cumpleanos = null;
    }
    if (!user.hasOwnProperty('banco')) {
      user.banco = 0;
    }
    if (!user.hasOwnProperty('ruletaChallenge')) {
      user.ruletaChallenge = null;
    }
    if (!user.hasOwnProperty('coleccionables')) {
      user.coleccionables = [];
    }
    if (!user.hasOwnProperty('ultimoColeccionable')) {
      user.ultimoColeccionable = 0;
    }
    if (!user.hasOwnProperty('personajeDisponible')) {
      user.personajeDisponible = null;
    }
    if (!user.hasOwnProperty('mensajePersonajeId')) {
      user.mensajePersonajeId = null;
    }

    // Procesar inversiones pendientes autom√°ticamente
    const inversionesCompletadas = procesarInversiones(user, senderId);
    if (inversionesCompletadas.length > 0) {
      const totalGanado = inversionesCompletadas.reduce((total, inv) => total + inv.retorno, 0);
      await sock.sendMessage(chatId, { 
        text: `‚óà ¬°Inversiones completadas!\n\n‚óâ Inversiones procesadas: ${inversionesCompletadas.length}\n‚ñ≤ Total ganado: *$${totalGanado.toLocaleString()}* coins universal\n‚óâ Balance actual: *$${user.dinero.toLocaleString()}*`
      }, {
        quoted: msg
      });
    }

    // #menu - Menu con comandos de econom√≠a
    if (body.startsWith("#menu") || body.startsWith("#help")) {
      const menu = `‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ
        ‚òÖ SUPREME BOT ‚òÖ
‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ


¬ª ‚ïê‚ïê‚ïê COMANDOS B√ÅSICOS ‚ïê‚ïê‚ïê ¬´

  [?] #menu ‚û§ Mostrar este men√∫
  [?] #com ‚û§ Ver comandos por categor√≠as
  [R] #registrar [nombre] ‚û§ Cambiar nombre
  [P] #perfil ‚û§ Ver tu perfil completo
  [T] #rank ‚û§ Top 10 usuarios m√°s fuertes
  [I] #info ‚û§ Informaci√≥n del grupo


¬ª ‚ïê‚ïê‚ïê PERSONALIZACI√ìN ‚ïê‚ïê‚ïê ¬´

  [D] #setdesc [texto] ‚û§ Establecer descripci√≥n
  [G] #setgenero [g√©nero] ‚û§ Establecer g√©nero
  [B] #setcumple [fecha] ‚û§ Establecer cumplea√±os


¬ª ‚ïê‚ïê‚ïê ENTRENAMIENTO ‚ïê‚ïê‚ïê ¬´

  [E] #entrenar ‚û§ Entrenar poder
  [+] #daily ‚û§ Recompensa diaria de poder


¬ª ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ECONOM√çA ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ¬´

  [W] #trabajar ‚û§ Ganar coins universal
  [S] #robar ‚û§ Actividades ilegales
  [$] #bal ‚û§ Ver tu balance actual
  [>] #d [cantidad] ‚û§ Depositar al banco
  [<] #retirar [cantidad] ‚û§ Retirar del banco
  [T] #tienda ‚û§ Ver items disponibles
  [C] #comprar [n√∫mero/item] ‚û§ Comprar items de la tienda
  [V] #inventario ‚û§ Ver y vender inventario
  [%] #apostar [cantidad] ‚û§ Apostar coins universal
  [^] #invertir [cantidad] ‚û§ Invertir a largo plazo
  [B] #negocio ‚û§ Crear/reclamar negocio
  [M] #minar ‚û§ Minar en cuevas


¬ª ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê COMBATE ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ¬´

  [X] #duelo @usuario ‚û§ Desafiar a otro usuario
  [O] #ruleta @usuario [cantidad] ‚û§ Ruleta rusa con apuesta


¬ª ‚ïê‚ïê‚ïê COLECCIONABLES ‚ïê‚ïê‚ïê ¬´

  [?] #colec ‚û§ Ver personaje aleatorio de anime
  [!] #re ‚û§ Reclamar personaje mostrado
  [L] #colecciones ‚û§ Ver tus personajes reclamados


¬ª ‚ïê‚ïê‚ïê UTILIDADES ‚ïê‚ïê‚ïê ¬´

  [#] #sticker ‚û§ Crear sticker


¬ª ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê STATUS ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ¬´

  Estado ‚û§ ACTIVO
  Versi√≥n ‚û§ v4.0
  Bot ‚û§ SUPREME
  Creado por ‚û§ L

‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ`;

      await sock.sendMessage(chatId, { text: menu }, { quoted: msg });
    }

    // #com - Comandos por categor√≠as
    if (body.startsWith("#com")) {
      const args = body.split(" ");

      if (args.length < 2) {
        const categorias = `‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ
      ¬ª CATEGOR√çAS DE COMANDOS ¬´
‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ

[1] *#com basicos* - Comandos b√°sicos
[2] *#com personalizacion* - Personalizar perfil
[3] *#com entrenamiento* - Entrenar y subir poder
[4] *#com economia* - Sistema econ√≥mico
[5] *#com combate* - Duelos y batallas
[6] *#com utilidades* - Herramientas √∫tiles
[7] *#com admin* - Comandos de administrador

¬ª *Ejemplo:* #com economia

‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ`;

        await sock.sendMessage(chatId, { text: categorias }, { quoted: msg });
        return;
      }

      const categoria = args[1].toLowerCase();
      let menuCategoria = "";

      switch (categoria) {
        case "basicos":
        case "b√°sicos":
        case "basic":
          menuCategoria = `[1] *COMANDOS B√ÅSICOS*

[?] #menu ‚û§ Mostrar men√∫ completo
[?] #com ‚û§ Ver comandos por categor√≠as
[R] #registrar [nombre] ‚û§ Cambiar tu nombre
[P] #perfil ‚û§ Ver tu perfil completo
[T] #rank ‚û§ Top 10 usuarios m√°s fuertes
[I] #info ‚û§ Informaci√≥n del grupo

¬ª *Usa #com [categor√≠a] para ver otros comandos*`;
          break;

        case "personalizacion":
        case "personalizaci√≥n":
        case "perfil":
          menuCategoria = `[2] *PERSONALIZACI√ìN*

[D] #setdesc [texto] ‚û§ Establecer descripci√≥n personal
[G] #setgenero [g√©nero] ‚û§ Establecer tu g√©nero
[B] #setcumple [fecha] ‚û§ Establecer tu cumplea√±os

*G√©neros disponibles:*
‚Ä¢ masculino, femenino, no binario
‚Ä¢ prefiero no decir, otro

¬ª *Ejemplo:* #setdesc Me gusta programar`;
          break;

        case "entrenamiento":
        case "entrenar":
        case "poder":
          menuCategoria = `[3] *ENTRENAMIENTO Y PODER*

[E] #entrenar ‚û§ Entrenar para ganar poder
[+] #daily ‚û§ Recompensa diaria de poder
[T] #tienda ‚û§ Comprar items de poder
[C] #comprar [item] ‚û§ Comprar de la tienda

*Sistema de Rangos:*
‚Ä¢ Callejero ‚Üí H√©roe ‚Üí Continental
‚Ä¢ Planetario ‚Üí Estelar ‚Üí Universal
‚Ä¢ Infinity ‚Üí Celestial ‚Üí Eterno ‚Üí Sester
‚Ä¢ Eterniti ‚Üí Eterniun

¬ª *Entrena cada 30 minutos para subir de poder*`;
          break;

        case "economia":
        case "econom√≠a":
        case "dinero":
        case "money":
          menuCategoria = `[4] *SISTEMA ECON√ìMICO*

[$] #bal ‚û§ Ver tu balance actual
[W] #trabajar ‚û§ Ganar coins universal
[S] #robar ‚û§ Actividades ilegales (riesgo)
[>] #d [cantidad] ‚û§ Depositar al banco
[<] #retirar [cantidad] ‚û§ Retirar del banco
[%] #apostar [cantidad] ‚û§ Apostar en el casino
[^] #invertir [cantidad] ‚û§ Inversiones a largo plazo
[B] #negocio ‚û§ Crear/reclamar negocio
[M] #minar ‚û§ Explorar cuevas (items raros)
[V] #inventario ‚û§ Ver y vender items

¬ª *Tip:* Invierte para ganancias garantizadas`;
          break;

        case "combate":
        case "pelea":
        case "batalla":
          menuCategoria = `[5] *COMBATE Y BATALLAS*

[X] #duelo @usuario ‚û§ Desafiar a otro usuario
[O] #ruleta @usuario [cantidad] ‚û§ Ruleta rusa con apuesta

*Reglas de Duelo:*
‚Ä¢ Ganador aleatorio basado en poder
‚Ä¢ Recompensa de poder para el ganador
‚Ä¢ Sin p√©rdidas para el perdedor

*Reglas de Ruleta:*
‚Ä¢ 50% probabilidad cada uno
‚Ä¢ Ganador se lleva toda la apuesta
‚Ä¢ Ambos deben tener el dinero

¬ª *Los duelos dan poder, la ruleta da dinero*`;
          break;

        case "coleccionables":
        case "anime":
        case "cartas":
          menuCategoria = `[6] *COLECCIONABLES ANIME*

[?] #colec ‚û§ Ver personaje aleatorio de anime
[!] #re ‚û§ Reclamar personaje mostrado
[L] #colecciones ‚û§ Ver tus personajes reclamados

*Personajes Disponibles:*
‚Ä¢ Dragon Ball Super (Goku, Vegeta)
‚Ä¢ One Punch Man (Saitama, Genos)

*Rareza y Probabilidades:*
‚Ä¢ üü¢ Com√∫n (25%) - Valor: $8,000
‚Ä¢ üîµ Raro (15%) - Valor: $15,000
‚Ä¢ üü£ √âpico (5-6%) - Valor: $22,000-25,000
‚Ä¢ üü° Legendario (0.5-2%) - Valor: $45,000-100,000

*Cooldown:* 30 minutos entre coleccionables
¬ª *¬°Colecciona personajes √∫nicos de anime!*`;
          break;

        case "utilidades":
        case "herramientas":
        case "tools":
          menuCategoria = `[7] *UTILIDADES*

[#] #sticker ‚û§ Crear stickers de im√°genes/videos
    ‚Ä¢ Responde a una imagen con #sticker
    ‚Ä¢ O env√≠a imagen con caption #sticker

*Formatos soportados:*
‚Ä¢ IMG Im√°genes (JPG, PNG, WEBP)
‚Ä¢ VID Videos (MP4) - m√°x 5 segundos
‚Ä¢ GIF GIFs - m√°x 3 segundos

¬ª *Env√≠a media + "#sticker" para convertir*`;
          break;

        case "admin":
        case "administrador":
          if (senderId === ADMIN_SUPREMO || senderId === ADMIN_SECUNDARIO) {
            menuCategoria = `[7] *COMANDOS DE ADMINISTRADOR*

[+] #addpower @usuario [cantidad] ‚û§ Dar poder
[$] #addmoney @usuario [cantidad] ‚û§ Dar dinero
[!] #resetuser @usuario ‚û§ Resetear usuario

*Solo para administradores supremos*
‚Ä¢ Poder ilimitado para gestionar usuarios
‚Ä¢ Resetear estad√≠sticas si es necesario

¬ª *Usa con responsabilidad*`;
          } else {
            menuCategoria = `[X] *ACCESO DENEGADO*

[!] Solo administradores supremos pueden ver estos comandos.

¬ª *Usa #com para ver otras categor√≠as disponibles*`;
          }
          break;

        default:
          menuCategoria = `[?] *Categor√≠a no encontrada*

¬ª *Categor√≠as disponibles:*
‚Ä¢ basicos, personalizacion, entrenamiento
‚Ä¢ economia, combate, utilidades, admin

¬ª *Ejemplo:* #com economia`;
          break;
      }

      await sock.sendMessage(chatId, { text: menuCategoria }, { quoted: msg });
    }

    // #registrar - Cambiar nombre
    if (body.startsWith("#registrar ")) {
      const nombreNuevo = body.split(" ").slice(1).join(" ").trim();
      if (!nombreNuevo || nombreNuevo.length < 2) {
        await sock.sendMessage(chatId, { text: "‚ùå Usa un nombre v√°lido\nüí° Ejemplo: #registrar Mi Nombre" }, { quoted: msg });
        return;
      }

      if (nombreNuevo.length > 25) {
        await sock.sendMessage(chatId, { text: "‚ùå Nombre muy largo. M√°ximo 25 caracteres." }, { quoted: msg });
        return;
      }

      user.nombre = nombreNuevo;
      guardarBD();
      await sock.sendMessage(chatId, { text: `‚úÖ Tu nuevo nombre es: *${nombreNuevo}*` }, { quoted: msg });
    }

    // #setdesc - Establecer descripci√≥n
    if (body.startsWith("#setdesc ")) {
      const descripcion = body.split(" ").slice(1).join(" ").trim();
      if (!descripcion || descripcion.length < 1) {
        await sock.sendMessage(chatId, { text: "‚ùå Usa una descripci√≥n v√°lida\nüí° Ejemplo: #setdesc Me gusta programar" }, { quoted: msg });
        return;
      }

      if (descripcion.length > 100) {
        await sock.sendMessage(chatId, { text: "‚ùå Descripci√≥n muy larga. M√°ximo 100 caracteres." }, { quoted: msg });
        return;
      }

      user.descripcion = descripcion;
      guardarBD();
      await sock.sendMessage(chatId, { text: `‚úÖ Tu descripci√≥n es: *${descripcion}*` }, { quoted: msg });
    }

    // #setgenero - Establecer g√©nero
    if (body.startsWith("#setgenero ")) {
      const genero = body.split(" ").slice(1).join(" ").trim().toLowerCase();
      const generosValidos = ['masculino', 'femenino', 'no binario', 'prefiero no decir', 'otro'];

      if (!genero || !generosValidos.includes(genero)) {
        await sock.sendMessage(chatId, { 
          text: "‚ùå G√©nero no v√°lido\n\nüí° Opciones disponibles:\n‚Ä¢ masculino\n‚Ä¢ femenino\n‚Ä¢ no binario\n‚Ä¢ prefiero no decir\n‚Ä¢ otro\n\nüìù Ejemplo: #setgenero masculino", 
          quoted: msg 
        });
        return;
      }

      user.genero = genero;
      guardarBD();
      await sock.sendMessage(chatId, { text: `‚úÖ Tu g√©nero es: *${genero}*` }, { quoted: msg });
    }

    // #setcumple - Establecer cumplea√±os
    if (body.startsWith("#setcumple ")) {
      const cumpleanos = body.split(" ").slice(1).join(" ").trim();
      if (!cumpleanos || cumpleanos.length < 1) {
        await sock.sendMessage(chatId, { text: "‚ùå Usa una fecha v√°lida\nüí° Ejemplo: #setcumple 15 de Mayo" }, { quoted: msg });
        return;
      }

      if (cumpleanos.length > 50) {
        await sock.sendMessage(chatId, { text: "‚ùå Fecha muy larga. M√°ximo 50 caracteres." }, { quoted: msg });
        return;
      }

      user.cumpleanos = cumpleanos;
      guardarBD();
      await sock.sendMessage(chatId, { text: `‚úÖ Tu cumplea√±os es: *${cumpleanos}*` }, { quoted: msg });
    }

    // #sticker - Crear sticker avanzado con soporte para videos/GIFs y media directa
    if (body.startsWith("#sticker")) {
      const quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
      const args = body.split(" ").slice(1).join(" ").trim();

      // Verificar si el mensaje actual tiene media con "#sticker" en el caption
      const currentImageMsg = msg.message.imageMessage;
      const currentVideoMsg = msg.message.videoMessage;
      const currentGifMsg = msg.message.gifMessage;

      let sourceMsg = null;
      let sourceMsgFull = null;
      let imageMsg = null;
      let videoMsg = null;
      let gifMsg = null;
      let processingMethod = "";

      // Prioritizar media directa si contiene "#sticker" en el caption
      if ((currentImageMsg || currentVideoMsg || currentGifMsg) && body.includes("#sticker")) {
        sourceMsg = msg.message;
        sourceMsgFull = msg;
        imageMsg = currentImageMsg;
        videoMsg = currentVideoMsg;
        gifMsg = currentGifMsg;
        processingMethod = "directo";
      } else if (quotedMsg) {
        // Usar mensaje citado como m√©todo de respaldo
        sourceMsg = quotedMsg;
        sourceMsgFull = {
          key: {
            remoteJid: chatId,
            id: msg.message.extendedTextMessage.contextInfo.stanzaId,
            participant: msg.message.extendedTextMessage.contextInfo.participant
          },
          message: quotedMsg
        };
        imageMsg = quotedMsg.imageMessage;
        videoMsg = quotedMsg.videoMessage;
        gifMsg = quotedMsg.gifMessage || quotedMsg.documentMessage;
        processingMethod = "respuesta";
      }

      // Si no hay media directa ni citada, mostrar ayuda
      if (!sourceMsg) {
        await sock.sendMessage(chatId, { 
          text: "üé® *Creador de Stickers Avanzado*\n\nüí° *Dos formas de usar:*\n\n**1. Media Directa:**\n‚Ä¢ Env√≠a una imagen/video/GIF con \"#sticker\" en el caption\n‚Ä¢ Ejemplo: Env√≠a una foto con caption \"#sticker mi sticker genial\"\n\n**2. Responder a Media:**\n‚Ä¢ Responde a una imagen, video o GIF con #sticker\n‚Ä¢ Ejemplo: Responde con \"#sticker descripci√≥n opcional\"\n\n‚ú® *Formatos soportados:*\n‚Ä¢ üñºÔ∏è Im√°genes (JPG, PNG, WEBP)\n‚Ä¢ üé• Videos (MP4, MOV) - m√°x 5 segundos\n‚Ä¢ üé≠ GIFs animados - m√°x 3 segundos\n\nüéØ *Pack personalizado:* Bot Supreme - Hecho por: [tu nombre]", 
          quoted: msg 
        });
        return;
      }

      if (!imageMsg && !videoMsg && !gifMsg) {
        await sock.sendMessage(chatId, { 
          text: "‚ùå Formato no soportado\n\n‚úÖ *Formatos v√°lidos:*\n‚Ä¢ üñºÔ∏è Im√°genes (JPG, PNG)\n‚Ä¢ üé• Videos (MP4, MOV)\n‚Ä¢ üé≠ GIFs animados\n\nüí° Usa #sticker con media v√°lida", 
          quoted: msg 
        });
        return;
      }

      try {
        await sock.sendMessage(chatId, { text: `üé® Procesando sticker (m√©todo ${processingMethod})...` }, { quoted: msg });

        // Descargar el contenido
        const buffer = await downloadMediaMessage(sourceMsgFull, 'buffer', {});
        const username = user.nombre || senderId.split("@")[0];

        let stickerBuffer;

        if (imageMsg) {
          // Procesar imagen sin watermark visual
          stickerBuffer = await sharp(buffer)
            .resize(512, 512, { fit: 'contain', background: { r: 0, g: 0, b: 0, alpha: 0 } })
            .webp()
            .toBuffer();

        } else if (videoMsg || gifMsg) {
          // Procesar video/GIF con FFmpeg sin watermark visual
          const tempInput = `temp_input_${Date.now()}.${videoMsg ? 'mp4' : 'gif'}`;
          const tempOutput = `temp_output_${Date.now()}.webp`;
          const escapedUsername = username.replace(/'/g, "\\'").replace(/:/g, "\\:");

          fs.writeFileSync(tempInput, buffer);

          await new Promise((resolve, reject) => {
            ffmpeg(tempInput)
              .inputOptions('-t 5') // Limitar a 5 segundos m√°ximo
              .outputOptions([
                `-vf scale=512:512:force_original_aspect_ratio=decrease,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=black@0`,
                '-vcodec libwebp',
                '-lossless 0',
                '-quality 75',
                '-preset picture',
                '-an', // Sin audio
                '-vsync 0',
                '-loop 0'
              ])
              .format('webp')
              .save(tempOutput)
              .on('end', () => {
                fs.unlinkSync(tempInput);
                resolve();
              })
              .on('error', (err) => {
                if (fs.existsSync(tempInput)) fs.unlinkSync(tempInput);
                reject(err);
              });
          });

          stickerBuffer = fs.readFileSync(tempOutput);
          fs.unlinkSync(tempOutput);
        }

        // Crear metadata personalizada del sticker pack
        const stickerOptions = {
          sticker: stickerBuffer
        };

        await sock.sendMessage(chatId, stickerOptions, { quoted: msg });

        const tipoMedia = imageMsg ? "imagen" : (videoMsg ? "video" : "GIF");
        await sock.sendMessage(chatId, { 
          text: `‚úÖ ¬°Sticker creado exitosamente!\n\nüé® *Procesado:* ${tipoMedia}\nüë§ *Creado por:* ${username}\nüì¶ *Pack:* Bot Supreme\n‚ö° *M√©todo:* ${processingMethod}`
        }, {
          quoted: msg 
        });

      } catch (error) {
        console.error("Error creando sticker:", error);
        await sock.sendMessage(chatId, { 
          text: `‚ùå Error creando sticker\n\nüí° *Posibles causas:*\n‚Ä¢ Archivo muy grande\n‚Ä¢ Formato no compatible\n‚Ä¢ Error de servidor\n\nüîÑ Intenta con otro archivo`
        }, {
          quoted: msg 
        });
      }
    }

    // #daily - Recompensa diaria
    if (body.startsWith("#daily")) {
      const ahora = Date.now();
      const cooldown = 86400000; // 24 horas en milisegundos
      const tiempoRestante = user.ultimaDaily + cooldown - ahora;

      if (tiempoRestante > 0) {
        const horas = Math.floor(tiempoRestante / 3600000);
        const minutos = Math.floor((tiempoRestante % 3600000) / 60000);
        await sock.sendMessage(chatId, { 
          text: `‚óä Ya reclamaste tu recompensa diaria\n‚Äª Espera *${horas}h ${minutos}m* para reclamar nuevamente`,
          quoted: msg
        });
        return;
      }

      // Recompensa progresiva basada en nivel
      const poderBase = 500;
      const poderBonus = user.nivel * 50;
      const poderTotal = poderBase + poderBonus + Math.floor(Math.random() * 200);

      user.poder += poderTotal;
      user.ultimaDaily = ahora;
      user.nivel = Math.floor(user.poder / 1000) + 1;

      const coinsReward = Math.floor(Math.random() * 3000) + 1000;
      user.dinero += coinsReward;

      guardarBD();

      const { rango, clasificacion } = obtenerRangoClasificacion(user.poder);

      await sock.sendMessage(chatId, { 
        text: `‚óâ ¬°Recompensa diaria reclamada!\n\n‚ö° +${poderTotal.toLocaleString()} poder ganado\nüí∞ +$${coinsReward.toLocaleString()} coins universal\n‚óà Poder total: ${user.poder.toLocaleString()}\n‚óä Nivel: ${user.nivel}\n‚óâ Rango: ${rango} ${clasificacion}\nüí∞ Coins Universal: $${user.dinero.toLocaleString()}`,
        quoted: msg
      });
    }

    // #entrenar - Entrenar poder con cooldown
    if (body.startsWith("#entrenar") || body.startsWith("#train")) {
      const ahora = Date.now();
      const cooldown = 1800000; // 30 minutos en milisegundos
      const tiempoRestante = user.ultimoEntrenamiento + cooldown - ahora;

      if (tiempoRestante > 0) {
        const minutos = Math.ceil(tiempoRestante / 60000);
        await sock.sendMessage(chatId, { 
          text: `‚óä A√∫n entrenando intensamente\n‚Äª Podr√°s entrenar nuevamente en *${minutos}* minutos`,
          quoted: msg
        });
        return;
      }

      // Entrenamiento progresivo
      const poderGanado = Math.floor(Math.random() * 300) + 200 + (user.nivel * 10);
      user.poder += poderGanado;
      user.ultimoEntrenamiento = ahora;
      user.nivel = Math.floor(user.poder / 1000) + 1;

      guardarBD();

      const { rango, clasificacion } = obtenerRangoClasificacion(user.poder);

      await sock.sendMessage(chatId, { 
        text: `‚ö° ¬°Entrenamiento completado!\n\n‚óâ +${poderGanado.toLocaleString()} poder ganado\n‚óà Poder total: ${user.poder.toLocaleString()}\n‚óä Nivel: ${user.nivel}\n‚óâ Rango: ${rango} ${clasificacion}`,
        quoted: msg
      });
    }

    // #trabajar - Ganar coins universal con cooldown
    if (body.startsWith("#trabajar") || body.startsWith("#work")) {
      const ahora = Date.now();
      const cooldown = 3600000; // 1 hora en milisegundos
      const tiempoRestante = user.ultimoTrabajo + cooldown - ahora;

      if (tiempoRestante > 0) {
        const minutos = Math.ceil(tiempoRestante / 60000);
        await sock.sendMessage(chatId, { 
          text: `‚óä A√∫n trabajando duro\n‚Äª Podr√°s trabajar nuevamente en *${minutos}* minutos`,
          quoted: msg
        });
        return;
      }

      // Trabajos variables basados en nivel
      const trabajos = [
        "Repartir comida",
        "Lavar autos", 
        "Vigilancia nocturna",
        "Pintar casas",
        "Jardiner√≠a",
        "Construcci√≥n",
        "Programaci√≥n",
        "Marketing digital"
      ];

      const trabajoRandom = trabajos[Math.floor(Math.random() * trabajos.length)];
      let gananciaBase = Math.floor(Math.random() * 2000) + 1000 + (user.nivel * 20);

      // Aplicar multiplicador si est√° activo
      if (user.multiplicadorTrabajo && ahora < user.multiplicadorTrabajo) {
        gananciaBase *= 2;
      }

      user.dinero += gananciaBase;
      user.ultimoTrabajo = ahora;

      // Probabilidad de encontrar coins universal extra (10%)
      let mensajeExtra = "";
      if (Math.random() < 0.1) {
        const bonusCoins = Math.floor(Math.random() * 500) + 200;
        user.dinero += bonusCoins;
        mensajeExtra = `\n‚óà ¬°BONUS! Encontraste *$${bonusCoins.toLocaleString()}* adicionales en el trabajo`;
      }

      guardarBD();

      const multiplicadorTexto = (user.multiplicadorTrabajo && ahora < user.multiplicadorTrabajo) ? "\n‚óà ¬°Multiplicador x2 aplicado!" : "";

      await sock.sendMessage(chatId, { 
        text: `‚óâ ¬°Trabajo completado!\n\n‚óà Trabajo: *${trabajoRandom}*\n‚ñ≤ Ganaste: *$${gananciaBase.toLocaleString()}* coins universal${mensajeExtra}${multiplicadorTexto}\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*`,
        quoted: msg
      });
    }

    // #bal - Ver balance
    if (body.startsWith("#bal") || body.startsWith("#balance") || body.startsWith("#dinero")) {
      // Procesar inversiones pendientes
      const inversionesCompletadas = procesarInversiones(user, senderId);

      let inversionesTexto = "";
      if (user.inversionesPendientes && user.inversionesPendientes.length > 0) {
        const tiempoRestante = user.inversionesPendientes[0].vencimiento - Date.now();
        const minutosRestantes = Math.ceil(tiempoRestante / 60000);
        inversionesTexto = `\n‚óä Inversiones pendientes: *${user.inversionesPendientes.length}*\n‚óâ Pr√≥xima inversi√≥n lista en: *${minutosRestantes}* minutos`;
      }

      await sock.sendMessage(chatId, { 
        text: `‚óà *TU BALANCE FINANCIERO*\n\nüí∞ Coins Universal: *$${user.dinero.toLocaleString()}*\nüè¶ En el banco: *$${user.banco.toLocaleString()}*\n‚óâ Total: *$${(user.dinero + user.banco).toLocaleString()}*${inversionesTexto}`,
        quoted: msg
      });
    }

    // #d - Depositar al banco
    if (body.startsWith("#d ")) {
      const args = body.split(" ");
      if (args.length < 2) {
        await sock.sendMessage(chatId, { 
          text: `‚óà Uso correcto: *#d [cantidad]*\n\nEjemplo: *#d 1000*`,
          quoted: msg
        });
        return;
      }

      const cantidad = parseInt(args[1]);
      if (isNaN(cantidad) || cantidad <= 0) {
        await sock.sendMessage(chatId, { 
          text: `‚óà Cantidad inv√°lida\n\nDebe ser un n√∫mero positivo`,
          quoted: msg
        });
        return;
      }

      if (user.dinero < cantidad) {
        await sock.sendMessage(chatId, { 
          text: `‚óà No tienes suficientes coins universal\n\n‚óâ Tienes: *$${user.dinero.toLocaleString()}*\n‚óä Quieres depositar: *$${cantidad.toLocaleString()}*`,
          quoted: msg
        });
        return;
      }

      user.dinero -= cantidad;
      user.banco += cantidad;
      guardarBD();

      await sock.sendMessage(chatId, { 
        text: `üè¶ ¬°Dep√≥sito exitoso!\n\n‚óâ Depositaste: *$${cantidad.toLocaleString()}*\nüí∞ Coins Universal: *$${user.dinero.toLocaleString()}*\nüè¶ En el banco: *$${user.banco.toLocaleString()}*`,
        quoted: msg
      });
    }

    // #retirar - Retirar del banco
    if (body.startsWith("#retirar ")) {
      const args = body.split(" ");
      if (args.length < 2) {
        await sock.sendMessage(chatId, { 
          text: `‚óà Uso correcto: *#retirar [cantidad]*\n\nEjemplo: *#retirar 1000*`,
          quoted: msg
        });
        return;
      }

      const cantidad = parseInt(args[1]);
      if (isNaN(cantidad) || cantidad <= 0) {
        await sock.sendMessage(chatId, { 
          text: `‚óà Cantidad inv√°lida\n\nDebe ser un n√∫mero positivo`,
          quoted: msg
        });
        return;
      }

      if (user.banco < cantidad) {
        await sock.sendMessage(chatId, { 
          text: `‚óà No tienes suficiente dinero en el banco\n\nüè¶ En el banco: *$${user.banco.toLocaleString()}*\n‚óä Quieres retirar: *$${cantidad.toLocaleString()}*`,
          quoted: msg
        });
        return;
      }

      user.banco -= cantidad;
      user.dinero += cantidad;
      guardarBD();

      await sock.sendMessage(chatId, { 
        text: `üí∞ ¬°Retiro exitoso!\n\n‚óâ Retiraste: *$${cantidad.toLocaleString()}*\nüí∞ Coins Universal: *$${user.dinero.toLocaleString()}*\nüè¶ En el banco: *$${user.banco.toLocaleString()}*`,
        quoted: msg
      });
    }

    // #robar - Actividades ilegales con riesgo
    if (body.startsWith("#robar") || body.startsWith("#rob")) {
      const ahora = Date.now();
      const cooldown = 7200000; // 2 horas en milisegundos
      const tiempoRestante = user.ultimoRobo + cooldown - ahora;

      if (tiempoRestante > 0) {
        const horas = Math.ceil(tiempoRestante / 3600000);
        await sock.sendMessage(chatId, { 
          text: `‚óä Las autoridades te est√°n vigilando\n‚Äª Podr√°s hacer actividades ilegales en *${horas}* horas`,
          quoted: msg
        });
        return;
      }

      const exito = Math.random() > 0.3; // 70% de √©xito

      if (exito) {
        const ganancia = Math.floor(Math.random() * 3000) + 1500 + (user.nivel * 30);
        user.dinero += ganancia;
        user.ultimoRobo = ahora;
        guardarBD();

        const actividades = [
          "robaste un banco",
          "hackeaste una empresa",
          "vendiste informaci√≥n",
          "robaste un auto de lujo",
          "estafaste una tienda"
        ];

        const actividadRandom = actividades[Math.floor(Math.random() * actividades.length)];

        await sock.sendMessage(chatId, { 
          text: `‚óà ¬°Robo exitoso!\n\n‚óâ Actividad: *${actividadRandom}*\n‚ñ≤ Ganaste: *$${ganancia.toLocaleString()}* coins universal\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*\n‚óä ¬°Lograste escapar!`,
          quoted: msg
        });
      } else {
        const perdida = Math.floor(user.dinero * 0.1); // Pierde 10% de su dinero
        user.dinero = Math.max(0, user.dinero - perdida);
        user.ultimoRobo = ahora;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `‚ùå ¬°Robo fallido!\n\n‚óâ Te atraparon robando\n‚ñº Perdiste: *$${perdida.toLocaleString()}* coins universal en multas\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*\n‚óä ¬°La pr√≥xima vez ten m√°s cuidado!`,
          quoted: msg
        });
      }
    }

    // #apostar - Apostar coins universal
    if (body.startsWith("#apostar") || body.startsWith("#bet")) {
      const ahora = Date.now();
      const cooldown = 900000; // 15 minutos en milisegundos
      const tiempoRestante = user.ultimaApuesta + cooldown - ahora;

      if (tiempoRestante > 0) {
        const minutos = Math.ceil(tiempoRestante / 60000);
        await sock.sendMessage(chatId, { 
          text: `‚óä Casino cerrado temporalmente\n‚Äª Podr√°s apostar en *${minutos}* minutos`,
          quoted: msg
        });
        return;
      }

      const args = body.split(" ");
      if (args.length < 2) {
        await sock.sendMessage(chatId, { 
          text: `‚óà Uso correcto: *#apostar [cantidad]*\n\nEjemplo: *#apostar 1000*\nM√≠nimo: 100 coins universal`,
          quoted: msg
        });
        return;
      }

      const cantidad = parseInt(args[1]);
      if (isNaN(cantidad) || cantidad < 100) {
        await sock.sendMessage(chatId, { 
          text: `‚óà Cantidad inv√°lida\n\nM√≠nimo: 100 coins universal`,
          quoted: msg
        });
        return;
      }

      if (user.dinero < cantidad) {
        await sock.sendMessage(chatId, { 
          text: `‚óà No tienes suficientes coins universal\n\n‚óâ Tienes: *$${user.dinero.toLocaleString()}*\n‚óä Necesitas: *$${cantidad.toLocaleString()}*`,
          quoted: msg
        });
        return;
      }

      user.ultimaApuesta = ahora;

      // 40% de ganar el doble, 60% de perder todo
      const gano = Math.random() < 0.4;

      if (gano) {
        const ganancia = cantidad * 2;
        user.dinero += ganancia;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `üé∞ ¬°GANASTE EN EL CASINO!\n\n‚óâ Apostaste: *$${cantidad.toLocaleString()}*\n‚ñ≤ Ganaste: *$${ganancia.toLocaleString()}*\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*\nüéâ ¬°Felicidades!`,
          quoted: msg
        });
      } else {
        user.dinero -= cantidad;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `üé∞ ¬°PERDISTE EN EL CASINO!\n\n‚óâ Apostaste: *$${cantidad.toLocaleString()}*\n‚ñº Perdiste: *$${cantidad.toLocaleString()}*\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*\nüò¢ ¬°Mejor suerte la pr√≥xima vez!`,
          quoted: msg
        });
      }
    }

    // #invertir - Inversiones a largo plazo
    if (body.startsWith("#invertir") || body.startsWith("#invest")) {
      const ahora = Date.now();
      const cooldown = 1800000; // 30 minutos en milisegundos
      const tiempoRestante = user.ultimaInversion + cooldown - ahora;

      if (tiempoRestante > 0) {
        const minutos = Math.ceil(tiempoRestante / 60000);
        await sock.sendMessage(chatId, { 
          text: `‚óä Espera tu pr√≥xima inversi√≥n\n‚Äª Podr√°s invertir en *${minutos}* minutos`,
          quoted: msg
        });
        return;
      }

      const args = body.split(" ");
      if (args.length < 2) {
        await sock.sendMessage(chatId, { 
          text: `‚óà Uso correcto: *#invertir [cantidad]*\n\nEjemplo: *#invertir 1000*\nM√≠nimo: 500 coins universal`,
          quoted: msg
        });
        return;
      }

      const cantidad = parseInt(args[1]);
      if (isNaN(cantidad) || cantidad < 500) {
        await sock.sendMessage(chatId, { 
          text: `‚óà Cantidad inv√°lida\n\nM√≠nimo: 500 coins universal`,
          quoted: msg
        });
        return;
      }

      if (user.dinero < cantidad) {
        await sock.sendMessage(chatId, { 
          text: `‚óà No tienes suficientes coins universal\n\n‚óâ Tienes: *$${user.dinero.toLocaleString()}*\n‚óä Necesitas: *$${cantidad.toLocaleString()}*`,
          quoted: msg
        });
        return;
      }

      user.dinero -= cantidad;
      user.ultimaInversion = ahora;

      // Inversi√≥n garantizada con retorno del 120-150% en 30 minutos
      const retorno = Math.floor(cantidad * (1.2 + Math.random() * 0.3));
      const vencimiento = ahora + 1800000; // 30 minutos

      // Agregar inversi√≥n pendiente al array
      user.inversionesPendientes.push({
        cantidad: cantidad,
        retorno: retorno,
        vencimiento: vencimiento
      });

      guardarBD();

      await sock.sendMessage(chatId, { 
        text: `‚óà ¬°Inversi√≥n realizada!\n\n‚óâ Invertiste: *$${cantidad.toLocaleString()}*\n‚ñ≤ Retorno estimado: *$${retorno.toLocaleString()}*\n‚óä Tiempo: 30 minutos\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*`,
        quoted: msg
      });
    }

    // #negocio - Crear/reclamar negocio para ingresos pasivos
    if (body.startsWith("#negocio")) {
      const ahora = Date.now();

      if (!user.negocio) {
        // Crear negocio
        if (user.dinero < 5000) {
          await sock.sendMessage(chatId, { 
            text: `‚óà Necesitas *$5,000* coins universal para abrir un negocio\n\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*`,
            quoted: msg
          });
          return;
        }

        const negocios = [
          "Puesto de Tacos",
          "Tienda de Ropa", 
          "Cafeter√≠a",
          "Barber√≠a",
          "Farmacia",
          "Panader√≠a"
        ];

        const negocioRandom = negocios[Math.floor(Math.random() * negocios.length)];
        user.dinero -= 5000;
        user.negocio = negocioRandom;
        user.ultimoNegocio = ahora;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `‚óà ¬°Negocio creado!\n\n‚óâ Negocio: *${negocioRandom}*\n‚ñ≤ Costo: $5,000 coins universal\n‚óâ Genera coins universal cada 2 horas\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*`,
          quoted: msg
        });
      } else {
        // Reclamar ganancias del negocio
        const cooldown = 7200000; // 2 horas en milisegundos
        const tiempoRestante = user.ultimoNegocio + cooldown - ahora;

        if (tiempoRestante > 0) {
          const horas = Math.ceil(tiempoRestante / 3600000);
          await sock.sendMessage(chatId, { 
            text: `‚óä Tu *${user.negocio}* a√∫n est√° trabajando\n\n‚óâ Ganancias listas en *${horas}* horas`,
            quoted: msg
          });
          return;
        }

        const ganancia = Math.floor(Math.random() * 800) + 400; // 400-1200
        user.dinero += ganancia;
        user.ultimoNegocio = ahora;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `‚óà ¬°Ganancias reclamadas!\n\n‚óâ Negocio: *${user.negocio}*\n‚ñ≤ Ganaste: *$${ganancia.toLocaleString()}*\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*`,
          quoted: msg
        });
      }
    }

    // #minar - Explorar cuevas con posibilidad de encontrar items raros
    if (body.startsWith("#minar")) {
      const ahora = Date.now();
      const cooldown = 900000; // 15 minutos en milisegundos
      const tiempoRestante = user.ultimaMineria + cooldown - ahora;

      if (tiempoRestante > 0) {
        const minutos = Math.ceil(tiempoRestante / 60000);
        await sock.sendMessage(chatId, { 
          text: `‚óä A√∫n explorando las cuevas\n‚Äª Podr√°s explorar nuevamente en *${minutos}* minutos`,
          quoted: msg
        });
        return;
      }

      // Inicializar inventario si no existe
      if (!user.inventario) user.inventario = {};

      const profundidad = Math.floor(Math.random() * 1000) + 200;
      const ganancia = Math.floor(Math.random() * (30000 - 7000 + 1)) + 7000;

      user.dinero += ganancia;
      user.ultimaMineria = ahora;

      let mensaje = `‚óà ¬°Exploraci√≥n completada!\n\n‚õèÔ∏è Profundidad explorada: *${profundidad.toLocaleString()}m*\n‚ñ≤ Tesoros encontrados: *$${ganancia.toLocaleString()}* coins universal\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*`;

      // Probabilidad de encontrar items raros
      const probabilidad = Math.random() * 100;

      if (probabilidad <= 0.1) {
        if (!user.inventario.diamante) user.inventario.diamante = 0;
        user.inventario.diamante += 1;

        mensaje += `\n\n‚Äª ¬°DESCUBRIMIENTO EXTRAORDINARIO!\nüíé ¬°Encontraste un *DIAMANTE* en las profundidades!\n‚óà Valor: *$10,600,767*\n‚óâ Usa #inventario diamante para venderlo`;

      } else if (probabilidad <= 2.1) {
        if (!user.inventario.onzaOro) user.inventario.onzaOro = 0;
        user.inventario.onzaOro += 1;

        // Configurar venta autom√°tica del bot en 1 hora
        const tiempoVenta = ahora + 3600000;
        if (!user.ventasPendientes) user.ventasPendientes = [];
        user.ventasPendientes.push({
          item: 'onzaOro',
          precio: 5145900,
          tiempoVenta: tiempoVenta
        });

        mensaje += `\n\n‚Äª ¬°DESCUBRIMIENTO RARO!\nüè∫ ¬°Encontraste una *ONZA DE ORO* enterrada!\n‚óà Valor: *$5,145,900*\n‚óâ El bot la comprar√° autom√°ticamente en 1 hora\n‚óä O usa #inventario oro para venderla ahora`;
      }

      guardarBD();

      await sock.sendMessage(chatId, { 
        text: mensaje,
        quoted: msg
      });
    }

    // #vender - Vender items del inventario
    if (body.startsWith("#inventario")) {
      const args = body.split(" ");
      if (args.length < 2) {
        let inventarioTexto = `‚óà *TU INVENTARIO*\n\n`;

        if (!user.inventario || Object.keys(user.inventario).length === 0) {
          inventarioTexto += `‚óä Inventario vac√≠o\n‚óâ Usa #minar para encontrar items raros`;
        } else {
          if (user.inventario.onzaOro && user.inventario.onzaOro > 0) {
            inventarioTexto += `‚óÜ Onza de Oro: *${user.inventario.onzaOro}*\n   ‚Äª Valor: *$5,145,900* c/u\n   ‚óâ Uso: *#inventario oro*\n\n`;
          }
          if (user.inventario.diamante && user.inventario.diamante > 0) {
            inventarioTexto += `‚óÜ Diamante: *${user.inventario.diamante}*\n   ‚Äª Valor: *$10,600,767* c/u\n   ‚óâ Uso: *#inventario diamante*\n\n`;
          }
        }

        await sock.sendMessage(chatId, { 
          text: inventarioTexto,
          quoted: msg
        });
        return;
      }

      const item = args[1].toLowerCase();

      if (item === "oro" || item === "onza") {
        if (!user.inventario || !user.inventario.onzaOro || user.inventario.onzaOro < 1) {
          await sock.sendMessage(chatId, { 
            text: `‚óä No tienes onzas de oro\n‚óâ Usa #minar para encontrar una`,
            quoted: msg
          });
          return;
        }

        user.inventario.onzaOro -= 1;
        user.dinero += 5145900;

        // Eliminar venta pendiente si existe
        if (user.ventasPendientes) {
          user.ventasPendientes = user.ventasPendientes.filter(v => v.item !== 'onzaOro');
        }

        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `‚óà ¬°Venta exitosa!\n\n‚óÜ Vendiste: *Onza de Oro*\n‚óà Recibiste: *$5,145,900*\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*`,
          quoted: msg
        });

      } else if (item === "diamante") {
        if (!user.inventario || !user.inventario.diamante || user.inventario.diamante < 1) {
          await sock.sendMessage(chatId, { 
            text: `‚óä No tienes diamantes\n‚óâ Usa #minar para encontrar uno`,
            quoted: msg
          });
          return;
        }

        user.inventario.diamante -= 1;
        user.dinero += 10600767;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `‚óà ¬°Venta extraordinaria!\n\n‚óÜ Vendiste: *Diamante*\n‚óà Recibiste: *$10,600,767*\n‚óâ Tus coins universal: *$${user.dinero.toLocaleString()}*`,
          quoted: msg
        });

      } else {
        await sock.sendMessage(chatId, { 
          text: `‚óä Item no v√°lido\n\n‚óâ Items vendibles:\n‚Äª oro - Onza de oro\n‚Äª diamante - Diamante\n\n‚óà Usa solo: *#inventario* para ver tu inventario`,
          quoted: msg
        });
      }
    }

    // #tienda - Ver items disponibles para comprar
    if (body.startsWith("#tienda") || body.startsWith("#shop")) {
      const tienda = `‚óâ *TIENDA SUPREMA*

‚Äª ITEMS DISPONIBLES ‚Äª

1. Pizza Energ√©tica ‚Üí $75,000
   ‚û§ +25,000 poder instant√°neo

2. Bebida Energ√©tica ‚Üí $225,000
   ‚û§ +75,000 poder instant√°neo

3. Vitamina Suprema ‚Üí $650,000
   ‚û§ +200,000 poder instant√°neo

4. Multiplicador x2 ‚Üí $1,500,000
   ‚û§ Doble ganancia en #trabajar por 1 hora

5. Gema del Poder ‚Üí $2,500,000
   ‚û§ +750,000 poder instant√°neo

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Compra r√°pida: *#comprar [n√∫mero]*
Ejemplo: *#comprar 1* (para pizza)`;

      await sock.sendMessage(chatId, { text: tienda }, { quoted: msg });
    }

    // #comprar - Comprar items de la tienda
    if (body.startsWith("#comprar")) {
      const args = body.split(" ");
      if (args.length < 2) {
        await sock.sendMessage(chatId, { 
          text: `‚ùå Uso correcto: *#comprar [n√∫mero/item]*\n\nEjemplo: *#comprar 1* o *#comprar pizza*\nUsa *#tienda* para ver items disponibles`,
          quoted: msg
        });
        return;
      }

      const item = args.slice(1).join(" ").toLowerCase();
      let itemData = null;

      // Definir items de la tienda
      const items = {
        "pizza": { nombre: "Pizza Energ√©tica", precio: 75000, poder: 25000, tipo: "poder" },
        "bebida": { nombre: "Bebida Energ√©tica", precio: 225000, poder: 75000, tipo: "poder" },
        "vitamina": { nombre: "Vitamina Suprema", precio: 650000, poder: 200000, tipo: "poder" },
        "multiplicador": { nombre: "Multiplicador x2", precio: 1500000, duracion: 3600000, tipo: "multiplicador" },
        "gema": { nombre: "Gema del Poder", precio: 2500000, poder: 750000, tipo: "poder" }
      };

      // Mapeo de n√∫meros a items
      const numeroItems = {
        "1": "pizza",
        "2": "bebida", 
        "3": "vitamina",
        "4": "multiplicador",
        "5": "gema"
      };

      // Buscar item por n√∫mero o nombre
      if (numeroItems[item]) {
        itemData = items[numeroItems[item]];
      } else {
        for (let key in items) {
          if (item.includes(key)) {
            itemData = items[key];
            break;
          }
        }
      }

      if (!itemData) {
        await sock.sendMessage(chatId, { 
          text: `‚ùå Item no encontrado\n\nUsa *#tienda* para ver items disponibles`,
          quoted: msg
        });
        return;
      }

      // Verificar si tiene dinero suficiente
      if (user.dinero < itemData.precio) {
        await sock.sendMessage(chatId, { 
          text: `‚óà No tienes suficientes coins universal\n\n‚óâ Tienes: *$${user.dinero.toLocaleString()}*\n‚óé Necesitas: *$${itemData.precio.toLocaleString()}*`,
          quoted: msg
        });
        return;
      }

      // Realizar compra
      user.dinero -= itemData.precio;

      if (itemData.tipo === "poder") {
        user.poder += itemData.poder;
        user.nivel = Math.floor(user.poder / 1000) + 1;

        const { rango, clasificacion } = obtenerRangoClasificacion(user.poder);
        await sock.sendMessage(chatId, { 
          text: `‚úÖ ¬°Compra exitosa!\n\n‚óâ ${itemData.nombre}\n‚ö° +${itemData.poder.toLocaleString()} poder ganado\n‚óà Poder total: ${user.poder.toLocaleString()}\n‚óä Rango: ${rango} ${clasificacion}\n‚óà Coins Universal: *$${user.dinero.toLocaleString()}*`,
          quoted: msg
        });
      } else if (itemData.tipo === "multiplicador") {
        user.multiplicadorTrabajo = Date.now() + itemData.duracion;
        await sock.sendMessage(chatId, { 
          text: `‚úÖ ¬°Compra exitosa!\n\n‚óâ ${itemData.nombre}\n‚ñ≤ Ganar√°s el doble en #trabajar por 1 hora\n‚óà Coins Universal: *$${user.dinero.toLocaleString()}*`,
          quoted: msg
        });
      }

      guardarBD();
    }

    // #perfil - Ver perfil
    if (body.startsWith("#perfil")) {
      // Verificar si es el admin supremo
      if (senderId === ADMIN_SUPREMO) {
        user.rayo = "Dios";
        user.poder = Math.max(user.poder, 10000000); // Asegurar poder m√≠nimo
        guardarBD();
      }

      let { rango, clasificacion } = obtenerRangoClasificacion(user.poder);

      // Override para rangos especiales
      if (senderId === ADMIN_SUPREMO) {
        rango = "Dios";
        clasificacion = "???";
      }

      let top = Object.values(usuarios).sort((a, b) => b.poder - a.poder);
      let posicion = top.findIndex(u => u === user) + 1;

      // Calcular progreso hacia el siguiente nivel
      const poderNivelActual = (user.nivel - 1) * 1000;
      const poderSiguienteNivel = user.nivel * 1000;
      const progresoActual = user.poder - poderNivelActual;
      const progresoTotal = poderSiguienteNivel - poderNivelActual;
      const porcentajeProgreso = Math.floor((progresoActual / progresoTotal) * 100);

      // Asegurar que el usuario tenga coins universal inicializado
      if (!user.hasOwnProperty('coinsUniversal')) {
        user.coinsUniversal = 0;
        guardarBD();
      }

      // Construir perfil con el formato solicitado
      let perfil = `„Äå ‚òÖ „Äç *P E R F I L*`;

      if (user.descripcion) {
        perfil += `\n\n*${user.descripcion}*`;
      }

      perfil += `

‚óâ Usuario ‚û§ *${user.nombre}*
‚óà Cumplea√±os ‚û§ *${user.cumpleanos || "No especificado"}*
‚óé G√©nero ‚û§ *${user.genero ? user.genero.charAt(0).toUpperCase() + user.genero.slice(1) : "No especificado"}*

„Äå ‚ö° „Äç *E S T A D I S T I C A S*

‚Äª Poder Total ‚û§ *${user.poder.toLocaleString()}*
‚óÜ Nivel Actual ‚û§ *${user.nivel}*
‚ñ≤ Progreso ‚û§ *${progresoActual.toLocaleString()}/${progresoTotal.toLocaleString()}* ‚åà${porcentajeProgreso}%‚åâ

‚ôõ Ranking Global ‚û§ *#${posicion.toLocaleString()}*
‚óä Clasificaci√≥n ‚û§ *${rango} [${clasificacion}]*
‚óà Coins Universal ‚û§ *$${user.dinero.toLocaleString()}*`;

      // Ya no necesitamos informaci√≥n adicional ya que todo est√° en el perfil principal
      let infoAdicional = '';

      // Try to get profile picture
      try {
        const profilePic = await sock.profilePictureUrl(senderId, 'image');
        await sock.sendMessage(chatId, {
          image: { url: profilePic },
          caption: perfil,
          quoted: msg
        });

        // Enviar descripci√≥n despu√©s de la foto si existe
        if (infoAdicional.trim()) {
          await sock.sendMessage(chatId, { 
            text: infoAdicional.trim(), 
            quoted: msg 
          });
        }
      } catch (error) {
        // If no profile picture, send text only with all info
        const perfilCompleto = perfil + (infoAdicional.trim() ? infoAdicional : '');
        await sock.sendMessage(chatId, { text: perfilCompleto }, { quoted: msg });
      }
    }

    // #rank - Top 10 usuarios
    if (body.startsWith("#rank")) {
      let top = Object.values(usuarios).sort((a, b) => b.poder - a.poder).slice(0, 10);

      if (top.length === 0) {
        await sock.sendMessage(chatId, { 
          text: `‚óà No hay usuarios registrados\n\n‚óâ Usa #registrar [nombre] para empezar`,
          quoted: msg 
        });
        return;
      }

      let ranking = `‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ
       ‚òÖ RANKING GLOBAL ‚òÖ
‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ


`;

      const symbols = ["‚óâ", "‚óä", "‚óà", "‚óé", "‚óÜ", "‚ô¶", "‚ñ≤", "‚ñº", "‚Äª", "‚ôõ"];

      top.forEach((u, i) => {
        let { rango, clasificacion } = obtenerRangoClasificacion(u.poder);
        let symbol = symbols[i] || `${i + 1}`;
        let posicion = i + 1;

        ranking += `${symbol} *#${posicion} ${u.nombre}*\n`;
        ranking += `   ‚Äª Poder: *${u.poder.toLocaleString()}*\n`;
        ranking += `   ‚óà Rango: *${rango} [${clasificacion}]*\n`;
        ranking += `   $ Coins: *$${(u.dinero || 0).toLocaleString()}*\n`;
        ranking += `   ‚óä Nivel: *${u.nivel || 1}*\n\n`;
      });

      // Mostrar posici√≥n del usuario actual si no est√° en el top 10
      const usuarioActual = Object.values(usuarios).sort((a, b) => b.poder - a.poder);
      const posicionUsuario = usuarioActual.findIndex(u => u.id === senderId) + 1;

      if (posicionUsuario > 10) {
        ranking += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
        ranking += `‚óà *Tu posici√≥n actual*\n`;
        ranking += `   ‚Äª Puesto: *#${posicionUsuario}*\n`;
        ranking += `   ‚óà Poder: *${user.poder.toLocaleString()}*\n`;
        ranking += `   ‚óä Para TOP 10 necesitas: *${top[9].poder + 1 - user.poder > 0 ? (top[9].poder + 1 - user.poder).toLocaleString() : 0}* m√°s poder\n`;
      }

      ranking += `\n‚óÜ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ‚óÜ`;

      await sock.sendMessage(chatId, { text: ranking }, { quoted: msg });
    }

    // #duelo - Duelo
    if (body.startsWith("#duelo")) {
      // Buscar objetivo en mentions o parsearlo del texto
      let enemigoId = null;
      const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];

      if (mentionedJid) {
        enemigoId = mentionedJid;
      } else {
        let partes = body.split(" ");
        if (partes.length < 2) {
          await sock.sendMessage(chatId, { text: "‚ùå Usa: #duelo @usuario\n‚öîÔ∏è Menciona al usuario" }, { quoted: msg });
          return;
        }
        enemigoId = partes[1].replace("@", "") + "@s.whatsapp.net";
      }

      // Validaciones
      if (enemigoId === senderId) {
        await sock.sendMessage(chatId, { text: "‚ùå No puedes duelarte contra ti mismo" }, { quoted: msg });
        return;
      }

      if (!usuarios[enemigoId]) {
        await sock.sendMessage(chatId, { text: "‚ùå Ese usuario no existe\nüéÆ Debe usar alg√∫n comando primero" }, { quoted: msg });
        return;
      }

      let enemigo = usuarios[enemigoId];

      const battleText = `‚öîÔ∏è Duelo iniciado\n\nüî• ${user.nombre} (${user.poder.toLocaleString()}‚ö°)\n       VS\nüî• ${enemigo.nombre} (${enemigo.poder.toLocaleString()}‚ö°)\n\n‚è≥ Combatiendo...`;

      await sock.sendMessage(chatId, { 
        text: battleText,
        mentions: [senderId, enemigoId],
        quoted: msg
      });

      // Wait for dramatic effect
      setTimeout(async () => {
        let ganador = Math.random() > 0.5 ? user : enemigo;
        let perdedor = ganador === user ? enemigo : user;
        let ganadorId = ganador === user ? senderId : enemigoId;
        let perdedorId = perdedor === user ? senderId : enemigoId;

        let recompensa = Math.floor(Math.random() * 1500) + 500;
        ganador.poder += recompensa;
        ganador.nivel = Math.floor(ganador.poder / 1000) + 1;
        guardarBD();

        const { rango: rangoGanador, clasificacion: clasifGanador } = obtenerRangoClasificacion(ganador.poder);

        const resultText = `üèÜ Resultado del duelo\n\nüëë **Ganador:** ${ganador.nombre}\nüí∞ **Recompensa:** +${recompensa.toLocaleString()} poder\n‚ö° **Poder total:** ${ganador.poder.toLocaleString()}\nüèÖ **Nuevo rango:** ${rangoGanador} ${clasifGanador}\n\nüíî **Derrotado:** ${perdedor.nombre}`;

        await sock.sendMessage(chatId, { 
          text: resultText,
          mentions: [ganadorId, perdedorId],
          quoted: msg
        });
      }, 3000);
    }

    // #ruleta - Ruleta Rusa con apuestas
    if (body.startsWith("#ruleta")) {
      const args = body.split(" ");

      // Verificar si es aceptar un desaf√≠o
      if (args.length === 2 && args[1].toLowerCase() === "aceptar") {
        // Buscar desaf√≠o pendiente
        if (!user.ruletaChallenge) {
          await sock.sendMessage(chatId, { 
            text: "‚ùå No tienes desaf√≠os de ruleta pendientes",
            quoted: msg
          });
          return;
        }

        const challenge = user.ruletaChallenge;
        const retadorId = challenge.from;
        const cantidad = challenge.amount;

        if (!usuarios[retadorId]) {
          user.ruletaChallenge = null;
          guardarBD();
          await sock.sendMessage(chatId, { 
            text: "‚ùå El retador ya no existe",
            quoted: msg
          });
          return;
        }

        const retador = usuarios[retadorId];

        // Verificar que ambos tengan el dinero
        if (user.dinero < cantidad || retador.dinero < cantidad) {
          user.ruletaChallenge = null;
          guardarBD();
          await sock.sendMessage(chatId, { 
            text: "‚ùå Uno de los jugadores no tiene suficiente dinero\n‚óà Desaf√≠o cancelado",
            quoted: msg
          });
          return;
        }

        // Iniciar la ruleta
        user.ruletaChallenge = null;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `üéØ ¬°RULETA RUSA INICIADA!\n\nüî´ ${retador.nombre} VS ${user.nombre}\nüí∞ Apuesta: *$${cantidad.toLocaleString()}* c/u\nüíÄ Total en juego: *$${(cantidad * 2).toLocaleString()}*\n\n‚è≥ Girando el tambor...`,
          mentions: [retadorId, senderId],
          quoted: msg
        });

        // Efecto dram√°tico
        setTimeout(async () => {
          // Determinar ganador (50/50)
          const ganador = Math.random() > 0.5 ? user : retador;
          const perdedor = ganador === user ? retador : user;
          const ganadorId = ganador === user ? senderId : retadorId;
          const perdedorId = perdedor === user ? senderId : retadorId;

          // Transferir dinero
          perdedor.dinero -= cantidad;
          ganador.dinero += cantidad;

          guardarBD();

          await sock.sendMessage(chatId, { 
            text: `üíÄ ¬°RESULTADO DE LA RULETA RUSA!\n\nüéØ **Ganador:** ${ganador.nombre}\nüí∞ **Gan√≥:** *$${cantidad.toLocaleString()}*\nüíÄ **Perdedor:** ${perdedor.nombre}\n‚ñº **Perdi√≥:** *$${cantidad.toLocaleString()}*\n\nüî´ ¬°${perdedor.nombre} recibi√≥ la bala!`,
            mentions: [ganadorId, perdedorId],
            quoted: msg
          });
        }, 4000);
        return;
      }

      // Crear nuevo desaf√≠o
      if (args.length < 3) {
        await sock.sendMessage(chatId, { 
          text: `üéØ *RULETA RUSA*\n\nüí° **Uso:** #ruleta @usuario [cantidad]\n\n**Ejemplo:** #ruleta @amigo 1000\n\nüî´ **Reglas:**\n‚Ä¢ Ambos apuestan la misma cantidad\n‚Ä¢ 50% de probabilidad de ganar\n‚Ä¢ El perdedor pierde su apuesta\n‚Ä¢ El ganador se lleva todo\n\nüíÄ **Para aceptar:** #ruleta aceptar`,
          quoted: msg
        });
        return;
      }

      // Buscar usuario objetivo
      let objetivoId = null;
      const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];

      if (mentionedJid) {
        objetivoId = mentionedJid;
      } else {
        objetivoId = args[1].replace("@", "") + "@s.whatsapp.net";
      }

      const cantidad = parseInt(args[2]);

      // Validaciones
      if (objetivoId === senderId) {
        await sock.sendMessage(chatId, { 
          text: "‚ùå No puedes desafiarte a ti mismo",
          quoted: msg
        });
        return;
      }

      if (!usuarios[objetivoId]) {
        await sock.sendMessage(chatId, { 
          text: "‚ùå Ese usuario no existe\nüéÆ Debe usar alg√∫n comando primero",
          quoted: msg
        });
        return;
      }

      if (isNaN(cantidad) || cantidad < 500) {
        await sock.sendMessage(chatId, { 
          text: "‚ùå La apuesta m√≠nima es *$500* coins universal",
          quoted: msg
        });
        return;
      }

      if (user.dinero < cantidad) {
        await sock.sendMessage(chatId, { 
          text: `‚ùå No tienes suficiente dinero\n\n‚óâ Tienes: *$${user.dinero.toLocaleString()}*\n‚óä Necesitas: *$${cantidad.toLocaleString()}*`,
          quoted: msg
        });
        return;
      }

      const objetivo = usuarios[objetivoId];

      if (objetivo.dinero < cantidad) {
        await sock.sendMessage(chatId, { 
          text: `‚ùå ${objetivo.nombre} no tiene suficiente dinero para esta apuesta\n\n‚óâ Tiene: *$${objetivo.dinero.toLocaleString()}*\n‚óä Necesita: *$${cantidad.toLocaleString()}*`,
          quoted: msg
        });
        return;
      }

      // Crear desaf√≠o
      objetivo.ruletaChallenge = {
        from: senderId,
        amount: cantidad,
        timestamp: Date.now()
      };

      guardarBD();

      await sock.sendMessage(chatId, { 
        text: `üéØ ¬°DESAF√çO DE RULETA RUSA!\n\nüî´ ${user.nombre} desaf√≠a a ${objetivo.nombre}\nüí∞ Apuesta: *$${cantidad.toLocaleString()}* coins universal cada uno\nüíÄ Total en juego: *$${(cantidad * 2).toLocaleString()}*\n\nüë§ @${objetivoId.split('@')[0]} tienes 5 minutos para aceptar\nüí° Usa: *#ruleta aceptar*`,
        mentions: [objetivoId],
        quoted: msg
      });

      // Auto-cancelar desaf√≠o despu√©s de 5 minutos
      setTimeout(() => {
        if (objetivo.ruletaChallenge && objetivo.ruletaChallenge.from === senderId) {
          objetivo.ruletaChallenge = null;
          guardarBD();
        }
      }, 300000); // 5 minutos
    }

    // #colecciones - Ver personajes reclamados ordenados por valor
    if (body.startsWith("#colecciones")) {
      if (!user.coleccionables || user.coleccionables.length === 0) {
        await sock.sendMessage(chatId, { 
          text: "üìö *TU COLECCI√ìN EST√Å VAC√çA* üìö\n\n‚ùå No has reclamado ning√∫n personaje a√∫n\n\nüí° Usa *#colec* para hacer aparecer personajes\nüéÅ Usa *#re* respondiendo al mensaje del personaje para reclamarlo",
          quoted: msg
        });
        return;
      }

      // Ordenar personajes por valor de mayor a menor
      const personajesOrdenados = [...user.coleccionables].sort((a, b) => b.valor - a.valor);
      
      let coleccionTexto = `üìö *TU COLECCI√ìN ANIME* üìö\n\n`;
      let valorTotal = 0;

      personajesOrdenados.forEach((personaje, index) => {
        // Determinar emoji de rareza
        let emojiRareza = "üü¢";
        if (personaje.rareza === "Raro") emojiRareza = "üîµ";
        else if (personaje.rareza === "√âpico") emojiRareza = "üü£";  
        else if (personaje.rareza === "Legendario") emojiRareza = "üü°";

        // Calcular tiempo desde que lo obtuvo
        const tiempoObtenido = personaje.fechaObtenido ? new Date(personaje.fechaObtenido).toLocaleDateString('es-ES') : 'Fecha desconocida';

        coleccionTexto += `üèÜ **#${index + 1}** - ${emojiRareza} **${personaje.nombre}**\n`;
        coleccionTexto += `   üéå ${personaje.anime}\n`;
        coleccionTexto += `   üí∞ Valor: *$${personaje.valor.toLocaleString()}*\n`;
        coleccionTexto += `   ‚≠ê Nivel: ${personaje.nivel}\n`;
        coleccionTexto += `   üìÖ Obtenido: ${tiempoObtenido}\n\n`;

        valorTotal += personaje.valor;
      });

      coleccionTexto += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      coleccionTexto += `üìä **ESTAD√çSTICAS DE COLECCI√ìN**\n\n`;
      coleccionTexto += `üóÇÔ∏è **Total personajes:** ${personajesOrdenados.length}\n`;
      coleccionTexto += `üíé **Valor total:** $${valorTotal.toLocaleString()}\n`;
      coleccionTexto += `üí∞ **Valor promedio:** $${Math.floor(valorTotal / personajesOrdenados.length).toLocaleString()}\n\n`;

      // Contar por rareza
      const porRareza = {
        'Legendario': personajesOrdenados.filter(p => p.rareza === 'Legendario').length,
        '√âpico': personajesOrdenados.filter(p => p.rareza === '√âpico').length,  
        'Raro': personajesOrdenados.filter(p => p.rareza === 'Raro').length,
        'Com√∫n': personajesOrdenados.filter(p => p.rareza === 'Com√∫n').length
      };

      coleccionTexto += `üéñÔ∏è **POR RAREZA:**\n`;
      if (porRareza['Legendario'] > 0) coleccionTexto += `üü° Legendarios: ${porRareza['Legendario']}\n`;
      if (porRareza['√âpico'] > 0) coleccionTexto += `üü£ √âpicos: ${porRareza['√âpico']}\n`;
      if (porRareza['Raro'] > 0) coleccionTexto += `üîµ Raros: ${porRareza['Raro']}\n`;
      if (porRareza['Com√∫n'] > 0) coleccionTexto += `üü¢ Comunes: ${porRareza['Com√∫n']}\n`;

      await sock.sendMessage(chatId, { 
        text: coleccionTexto,
        quoted: msg
      });
    }

    // #colec - Mostrar personaje aleatorio de anime 
    else if (body === "#colec") {
      const ahora = Date.now();
      const cooldown = 1800000; // 30 minutos en milisegundos
      const tiempoRestante = user.ultimoColeccionable + cooldown - ahora;

      if (tiempoRestante > 0) {
        const minutos = Math.ceil(tiempoRestante / 60000);
        await sock.sendMessage(chatId, { 
          text: `‚è∞ Espera *${minutos} minutos* para ver otro personaje\n\nüí° Usa #re para reclamar el personaje actual si hay uno disponible`,
          quoted: msg
        });
        return;
      }

      // Generar personaje aleatorio
      const personaje = obtenerPersonajeAleatorio();
      user.personajeDisponible = personaje;
      user.ultimoColeccionable = ahora;
      guardarBD();

      // Determinar emoji de rareza
      let emojiRareza = "üü¢";
      if (personaje.rareza === "Raro") emojiRareza = "üîµ";
      else if (personaje.rareza === "√âpico") emojiRareza = "üü£";  
      else if (personaje.rareza === "Legendario") emojiRareza = "üü°";

      // Formato de habilidades
      const habilidadesTexto = personaje.habilidades ? `\nü•ã **Habilidades:** ${personaje.habilidades.join(' ‚Ä¢ ')}` : '';

      const caption = `üé¥ *PERSONAJE APARECIDO* üé¥\n\nüìõ **${personaje.nombre}**\nüéå **Serie:** ${personaje.anime}\n${emojiRareza} **Rareza:** ${personaje.rareza}\n‚≠ê **Nivel:** ${personaje.nivel}\nüí∞ **Valor:** $${personaje.valor.toLocaleString()}\n‚ö° **Poder:** ${personaje.poder.toLocaleString()}${habilidadesTexto}\n\nüìñ ${personaje.descripcion}\n\nüéÅ Usa *#re* para reclamarlo antes que aparezca otro`;

      // Descargar y enviar imagen desde URL
      console.log(`üñºÔ∏è Intentando descargar imagen desde: ${personaje.imagenUrl}`);
      
      try {
        let mensajeEnviado;
        
        if (personaje.imagenUrl) {
          console.log(`üì• Descargando imagen de: ${personaje.imagenUrl}`);
          const imagenBuffer = await descargarImagenDesdeUrl(personaje.imagenUrl);
          console.log(`üìè Tama√±o imagen descargada: ${imagenBuffer.length} bytes`);
          
          mensajeEnviado = await sock.sendMessage(chatId, {
            image: imagenBuffer,
            caption: caption,
            quoted: msg
          });
          console.log(`üì§ Imagen enviada exitosamente desde URL`);
        } else {
          console.log(`‚ö†Ô∏è No hay URL de imagen disponible`);
          mensajeEnviado = await sock.sendMessage(chatId, { 
            text: caption,
            quoted: msg
          });
        }
        
        // Guardar el ID del mensaje del personaje para validaci√≥n
        user.mensajePersonajeId = mensajeEnviado.key.id;
        guardarBD();
        
      } catch (error) {
        console.error(`‚ùå Error descargando/enviando imagen: ${error.message}`);
        console.error(`üîç Stack trace:`, error.stack);
        
        // Si falla la descarga, enviar solo texto
        const mensajeEnviado = await sock.sendMessage(chatId, { 
          text: caption,
          quoted: msg
        });
        
        user.mensajePersonajeId = mensajeEnviado.key.id;
        guardarBD();
      }
    }

    // #re - Reclamar personaje disponible (solo respondiendo al mensaje del personaje)
    if (body.startsWith("#re")) {
      if (!user.personajeDisponible) {
        await sock.sendMessage(chatId, { 
          text: "‚ùå No hay personajes disponibles para reclamar\n\nüí° Usa *#colec* para hacer aparecer un personaje",
          quoted: msg
        });
        return;
      }

      // Verificar que est√© respondiendo al mensaje correcto del personaje
      const quotedMsg = msg.message?.extendedTextMessage?.contextInfo?.quotedMessage;
      const stanzaId = msg.message?.extendedTextMessage?.contextInfo?.stanzaId;
      
      if (!quotedMsg || !stanzaId || stanzaId !== user.mensajePersonajeId) {
        await sock.sendMessage(chatId, { 
          text: "‚ùå Debes responder espec√≠ficamente al mensaje del personaje que apareci√≥\n\nüí° Responde al √∫ltimo mensaje de personaje con *#re*",
          quoted: msg
        });
        return;
      }

      const personaje = user.personajeDisponible;
      
      // Verificar que el usuario no tenga ya este personaje
      const yaLoTiene = user.coleccionables.find(p => p.id === personaje.id);
      if (yaLoTiene) {
        // Si ya lo tiene, dar coins en lugar del personaje
        const coinsRecompensa = Math.floor(personaje.valor * 0.5);
        user.dinero += coinsRecompensa;
        user.personajeDisponible = null;
        user.mensajePersonajeId = null;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `üîÑ *PERSONAJE DUPLICADO* üîÑ\n\nüìõ Ya tienes a **${personaje.nombre}**\nüí∞ Recompensa: *$${coinsRecompensa.toLocaleString()}* coins universal\nüí∏ Balance total: *$${user.dinero.toLocaleString()}*\n\nüí° Usa *#colec* para buscar otros personajes`,
          quoted: msg
        });
        return;
      }

      // Agregar personaje a la colecci√≥n
      const personajeColeccionado = {
        ...personaje,
        fechaObtenido: Date.now()
      };
      
      user.coleccionables.push(personajeColeccionado);
      user.personajeDisponible = null;
      user.mensajePersonajeId = null;
      guardarBD();

      // Determinar emoji de rareza
      let emojiRareza = "üü¢";
      if (personaje.rareza === "Raro") emojiRareza = "üîµ";
      else if (personaje.rareza === "√âpico") emojiRareza = "üü£";  
      else if (personaje.rareza === "Legendario") emojiRareza = "üü°";

      // Formato de habilidades para mensaje de obtenci√≥n
      const habilidadesTexto = personaje.habilidades ? `\nü•ã **Habilidades:** ${personaje.habilidades.join(' ‚Ä¢ ')}` : '';

      await sock.sendMessage(chatId, { 
        text: `üéâ *¬°PERSONAJE OBTENIDO!* üéâ\n\nüìõ **${personaje.nombre}**\n${emojiRareza} **${personaje.rareza}**\nüéå **Serie:** ${personaje.anime}\n‚≠ê **Nivel:** ${personaje.nivel}\nüí∞ **Valor:** $${personaje.valor.toLocaleString()}\n‚ö° **Poder:** ${personaje.poder.toLocaleString()}${habilidadesTexto}\n\nüóÇÔ∏è **Total coleccionados:** ${user.coleccionables.length}\nüí° Usa *#inventario* para ver tu colecci√≥n completa`,
        quoted: msg
      });
    }


    // Comandos de administrador supremo
    if (senderId === ADMIN_SUPREMO || senderId === ADMIN_SECUNDARIO) {

      // #addpower - Dar poder a un usuario
      if (body.startsWith("#addpower ")) {
        const args = body.split(" ");
        if (args.length < 3) {
          await sock.sendMessage(chatId, { 
            text: "Uso: #addpower @usuario [cantidad]\nEjemplo: #addpower @usuario 1000",
            quoted: msg
          });
          return;
        }

        let targetId = null;
        const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];

        if (mentionedJid) {
          targetId = mentionedJid;
        } else {
          targetId = args[1].replace("@", "") + "@s.whatsapp.net";
        }

        const cantidad = parseInt(args[2]);

        if (!usuarios[targetId]) {
          await sock.sendMessage(chatId, { 
            text: "‚ùå Usuario no encontrado",
            quoted: msg
          });
          return;
        }

        if (isNaN(cantidad)) {
          await sock.sendMessage(chatId, { 
            text: "‚ùå Cantidad inv√°lida",
            quoted: msg
          });
          return;
        }

        usuarios[targetId].poder += cantidad;
        usuarios[targetId].nivel = Math.floor(usuarios[targetId].poder / 1000) + 1;
        guardarBD();

        const { rango, clasificacion } = obtenerRangoClasificacion(usuarios[targetId].poder);

        await sock.sendMessage(chatId, { 
          text: `‚úÖ Poder a√±adido exitosamente\n\nüë§ Usuario: ${usuarios[targetId].nombre}\n‚ö° +${cantidad.toLocaleString()} poder\n‚óà Poder total: ${usuarios[targetId].poder.toLocaleString()}\n‚óä Nuevo rango: ${rango} ${clasificacion}`,
          quoted: msg
        });
      }

      // #addmoney - Dar dinero a un usuario
      if (body.startsWith("#addmoney ")) {
        const args = body.split(" ");
        if (args.length < 3) {
          await sock.sendMessage(chatId, { 
            text: "Uso: #addmoney @usuario [cantidad]\nEjemplo: #addmoney @usuario 10000",
            quoted: msg
          });
          return;
        }

        let targetId = null;
        const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];

        if (mentionedJid) {
          targetId = mentionedJid;
        } else {
          targetId = args[1].replace("@", "") + "@s.whatsapp.net";
        }

        const cantidad = parseInt(args[2]);

        if (!usuarios[targetId]) {
          await sock.sendMessage(chatId, { 
            text: "‚ùå Usuario no encontrado",
            quoted: msg
          });
          return;
        }

        if (isNaN(cantidad)) {
          await sock.sendMessage(chatId, { 
            text: "‚ùå Cantidad inv√°lida",
            quoted: msg
          });
          return;
        }

        usuarios[targetId].dinero += cantidad;
        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `‚úÖ Dinero a√±adido exitosamente\n\nüë§ Usuario: ${usuarios[targetId].nombre}\nüí∞ +$${cantidad.toLocaleString()} coins universal\n‚óà Total: $${usuarios[targetId].dinero.toLocaleString()}`,
          quoted: msg
        });
      }

      // #resetuser - Resetear usuario
      if (body.startsWith("#resetuser ")) {
        const args = body.split(" ");
        if (args.length < 2) {
          await sock.sendMessage(chatId, { 
            text: "Uso: #resetuser @usuario",
            quoted: msg
          });
          return;
        }

        let targetId = null;
        const mentionedJid = msg.message?.extendedTextMessage?.contextInfo?.mentionedJid?.[0];

        if (mentionedJid) {
          targetId = mentionedJid;
        } else {
          targetId = args[1].replace("@", "") + "@s.whatsapp.net";
        }

        if (!usuarios[targetId]) {
          await sock.sendMessage(chatId, { 
            text: "‚ùå Usuario no encontrado",
            quoted: msg
          });
          return;
        }

        // Resetear usuario a valores iniciales
        usuarios[targetId] = {
          nombre: usuarios[targetId].nombre, // Mantener nombre
          nivel: 1,
          poder: 100,
          rayo: null,
          ultimaDaily: 0,
          ultimoEntrenamiento: 0,
          coinsUniversal: 0,
          dinero: 1000,
          banco: 0,
          ultimoTrabajo: 0,
          ultimoRobo: 0,
          ultimaApuesta: 0,
          ultimaInversion: 0,
          ultimaMineria: 0,
          negocio: null,
          ultimoNegocio: 0,
          multiplicadorTrabajo: 0,
          inversionesPendientes: [],
          descripcion: null,
          genero: null,
          cumpleanos: null,
          ruletaChallenge: null
        };

        guardarBD();

        await sock.sendMessage(chatId, { 
          text: `‚úÖ Usuario reseteado exitosamente\n\nüë§ ${usuarios[targetId].nombre} ha sido reseteado a valores iniciales`,
          quoted: msg
        });
      }
    }
  });
}

// Iniciar el bot
startBot().catch(console.error);
